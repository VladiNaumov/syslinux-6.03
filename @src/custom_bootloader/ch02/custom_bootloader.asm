section .text
global _start

_start:
    ; Настройка сегментов для реальной адресации
    cli                  ; Отключаем прерывания
    xor ax, ax           ; Устанавливаем 0 в AX
    mov ds, ax           ; Устанавливаем сегмент данных на 0
    mov es, ax           ; Устанавливаем сегмент назначения на 0

    ; Загрузка ядра с диска
    mov ah, 0x02         ; BIOS функция: Чтение секторов с диска
    mov al, 1            ; Количество секторов (1 сектор = 512 байт)
    mov ch, 0            ; Номер дорожки (Track 0)
    mov cl, 2            ; Номер сектора (Sector 2)
    mov dh, 0            ; Номер головки (Head 0)
    mov dl, 0x80         ; Диск (0x80 - первый жесткий диск)
    mov bx, 0x7E00       ; Адрес, куда загружаем сектор (0x7E00)
    int 0x13             ; Вызов BIOS: Чтение сектора

    jc load_error        ; Если ошибка, перейти на load_error

    ; Передача управления загруженному ядру
    jmp 0x0000:0x7E00    ; Переход на адрес загруженного ядра

load_error:
    ; Ошибка загрузки
    hlt                  ; Остановить выполнение


/*

Объяснение кода:

### Инициализация:

Отключаются прерывания (cli), и сегменты данных и назначения устанавливаются на нулевые значения (это важно для реальной адресации в 16-битной системе).
Чтение ядра с диска:

Используется BIOS-прерывание int 0x13 для чтения данных с диска.
В регистр ah загружается значение 0x02, что означает "читать секторы с диска".
Указываются параметры чтения: мы читаем один сектор (512 байт) с диска, начиная с сектора 2 (так как сектор 0 обычно содержит MBR).
Данные читаются в память по адресу 0x7E00.
Передача управления ядру:

После того как сектор загружен в память, выполняется переход на загруженное "ядро" по адресу 0x7E00.

### Обработка ошибки:
Если чтение с диска завершилось неудачно, загрузчик переходит к метке load_error и останавливает выполнение (hlt).
Как это работает:
Этот код имитирует реальный процесс загрузки ядра с диска. В реальных условиях загрузчик использует BIOS-функции для чтения секторов с жесткого диска (или другого носителя) и загружает ядро в память.
После загрузки ядра в память управление передается загруженному коду (ядру), и оно начинает свое выполнение.


*/